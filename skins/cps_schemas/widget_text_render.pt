<tal:block define="mode options/mode;
  id here/getWidgetId;
  value_name here/getHtmlWidgetId;
  value options/value;
  html_editor_type options/html_editor_type|string:Undefined;
  file_uploader here/file_uploader;
  html_editor_position options/html_editor_position;
  rposition options/render_position;
  rformat options/render_format;
  configurable options/configurable;
  file_upload_id python:'widget__%s_fileupload' % id;
  position_selector_id string:${value_name}_rposition;
  format_selector_id string:${value_name}_rformat;
  button_text_editor_popup_id python:'widget__%s_button' % id;
  utool nocall:here/portal_url;
  absolute here/absolute|python:False;
  base_url python:test(absolute, utool()+'/', utool.getBaseUrl());
  ">
  <tal:block condition="python: mode == 'view'">
    <div tal:condition="value"
      tal:attributes="class python:test(rposition == 'col_left', 'dcolleft',
      test(rposition == 'col_right',
      'dcolright', 'ddefault'))"
      tal:content="structure value" />
  </tal:block>
  <tal:block condition="python:mode == 'edit'">
        <textarea class="monospaceFont resizable"
          tal:attributes="id value_name;
          name value_name;
          cols here/width;
          rows here/height;
          class python:test(rformat == 'html'
                            and html_editor_type == 'tinymce'
                            and html_editor_position == 'embedded',
                            'mceEditor', default);
          "
          tal:content="value"
          />
      <tal:block condition="python:rformat == 'html'">
        <script type="text/javascript"
                tal:define="popup_editor_form_file_name
                python:test(html_editor_type == 'tinymce', 'popup_tinymce_form',
                            html_editor_type == 'fckeditor', 'popup_fckeditor_form')"
                tal:content="structure string:
var popup_editor_form = '${popup_editor_form_file_name}';
">
        </script>
      </tal:block>
      <tal:block condition="python:rformat == 'html' and html_editor_position == 'embedded'">
        <tal:block condition="python:html_editor_type == 'tinymce'">
          <script type="text/javascript" src=""
                  tal:attributes="src string:${base_url}tiny_mce.js">
          </script>
  <script type="text/javascript"
                tal:define="parent_path python:context.aq_inner.aq_parent.absolute_url_path()"
                tal:content="structure string:
tinyMCE.init({
    mode : 'specific_textareas',
    editor_selector : 'mceEditor',
    theme : 'advanced',
    plugins : 'table',
    theme_advanced_buttons1 : 'bold,italic,underline,strikethrough,bullist,numlist,formatselect,removeformat,separator,link,unlink,anchor,image,separator,undo,redo,code',
    theme_advanced_buttons2 : 'tablecontrols',
    theme_advanced_buttons3 : '',
    theme_advanced_toolbar_location : 'top',
    theme_advanced_statusbar_location : 'bottom',
    theme_advanced_resizing : true
});
">
   </script>
        </tal:block>
        <tal:block condition="python:html_editor_type == 'fckeditor'">
        <script type="text/javascript" src=""
                tal:attributes="src string:${base_url}fckeditor.js">
        </script>
        <script type="text/javascript" src=""
                tal:attributes="src string:${base_url}fckeditor_form.js">
        </script>
        <script type="text/javascript"
                tal:define="parent_path python:context.aq_inner.aq_parent.absolute_url_path()"
                tal:content="structure string:
displayFckEditor('${value_name}', '${parent_path}', '${base_url}');
">
        </script>
      </tal:block>
      </tal:block>
    <p>
      <tal:block condition="file_uploader">
        <label tal:attributes="for file_upload_id"
          i18n:translate="label_file_upload">
          File to use to fill the text area:</label>
        <input type="file"
          tal:attributes="id file_upload_id; name file_upload_id"/><br/>
      </tal:block>
      <tal:block condition="python: configurable.find('position') >= 0">
        <label tal:attributes="for position_selector_id"
          i18n:translate="cpsschemas_render_position">Position:</label>
        <select tal:attributes="id position_selector_id;
                                name position_selector_id">
          <option tal:repeat="op here/all_render_positions"
            tal:attributes="selected python:op == rposition;
            value op"
            tal:content="string:cpsschemas_rposition_${op}" i18n:translate="" />
        </select>
      </tal:block>
      <tal:block condition="python: configurable.find('format') >= 0">
        <label tal:attributes="for format_selector_id"
          i18n:translate="cpsschemas_render_format">Format:</label>
        <select tal:attributes="id format_selector_id;
                                name format_selector_id;
          onchange python:'showElement(this.value == \'html\',\'%s\')' % button_text_editor_popup_id
          ">
          <option tal:repeat="op here/all_render_formats"
            tal:attributes="selected python:op == rformat;
            value op"
            tal:content="string:cpsschemas_rformat_${op}" i18n:translate="" />
        </select>
      </tal:block>
      <tal:block condition="python:html_editor_position == 'popup'">
      <button type="button"
        i18n:translate="button_text_editor_popup"
        tal:attributes="
        id button_text_editor_popup_id;
        style python:test(rformat == 'html',
        'visibility: visible;;', 'visibility: hidden;; display: none;;');
        onclick
        string:javascript:popup_rte('${value_name}', '${here/label_edit}')
        "
        >Layout</button>
      </tal:block>
    </p>

  </tal:block>
</tal:block>
